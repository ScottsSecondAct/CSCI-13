/**
 * MIT License
 *
 * Copyright (c) 2024 Scott Davis
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
/*
 * This source file was generated by the Gradle 'init' task
 */
package weatherapiapp;

import weatherapiapp.GridPoint.GridPoint;
import weatherapiapp.Location.Location;
import weatherapiapp.WeatherForecast.WeatherForecast;
import weatherapiapp.WeatherForecast.WeatherForecastApiClient;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;

public class App {
    private static final Logger LOGGER = Logger.getLogger(WeatherForecastApiClient.class.getName());
    public static void main(String[] args) {
        //String addressString = "5100 Sierra College Blvd, Rocklin, CA 95677";
        String addressString = "13254 Peardale Road, Grass Valley, CA 95945";

        // Get the location of the address in Latitude and Longitude
        Optional<Location> location;
        location = Location.getLocation(addressString);

        // Get the grid point of the location
        Optional<GridPoint> gridPoint = Optional.empty();
        if (location.isPresent())
        {
            gridPoint = GridPoint.getGridPoint(location.get());
        } else {
            LOGGER.log(Level.WARNING, "Location not available for the address.");
            System.exit(0);
        }

        // Get the weather forecast of the grid point
        Optional<WeatherForecast> weatherForecast = Optional.empty();
        if (gridPoint.isPresent()) {
            weatherForecast = WeatherForecast.getWeatherForecast(gridPoint.get());
        } else {
            LOGGER.log(Level.WARNING, "Weather forecast not available for the location.");
            System.exit(0);
        }

        if (weatherForecast.isPresent()) {
            (weatherForecast.get()).printWeatherForecastForWeek();
        } else {
            LOGGER.log(Level.WARNING, "Weather forecast not available for the location.");
            System.exit(0);
        }
    }
}